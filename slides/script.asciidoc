== What is Bash?

In this section I'm going to talk through what bash is, what a shell is, and
briefly how bash compares to other shells.

On one level, Bash is just a software program just like any other. Bash is
a special type of program called a 'shell'. A 'shell' is a program that takes
input from the user on the command line, and interprets these commands to
perform actions for you that either do some computation, or communicate with
the operating system to open files, read them, go to the network, and so on.

A shell also allows you to combine these commands in creative ways to get
useful work done.

=== Other Shells

Bash is not the only shell out there - there are countless others. Some of the
more common ones are listed here. You may have heard or used some of them
before.

They have different histories, syntaxes, rules and cultures around them. Bash
is by far the most popular and widely used shell. However others still
have their die-hard advocates or niches in which they are particularly powerful.

=== History of Bash

These shells can be seen as part of a family tree, since they were mostly
developed from one another. A family tree of related shells is shown here.

images/shell_history.png

The original Thompson Shell from 1971 is the parent of the bourne shell and
cshell of 1977 and 1978 respectively. bash itself was created in 1987 and
was a child of the bourne shell (it was called 'bourne again shell'), which
is where the name bash comes from. This means bash is over 30 years old, which
is an eternity in the world of software!


//BREAK - TERMINAL

Here you run csh from within your bash terminal by typing csh.
This might not work for you if csh is not installed, so you may need to install
it if you want to follow along:

 csh

Note that you get a different prompt by default.
Typically, a csh will give you a prompt with a percent sign, while bash will
give you a prompt with a dollar sign. This is configurable, though, so your
setup may be different.

 echo $dirstack

The `dirstack` variable is set by csh and will output something meaningful.
Itâ€™s not there by default in bash as we will see in a moment.

 echo $BASH_VERSION

Also, the BASH_VERSION variable you saw in the previous section does not exist in
cshell because you are not in bash anymore!

To terminate shells, you usually input 'exit'

 exit

and now we are back in our bash shell, let's check that the BASH_VERSION variable
is still available:

 echo $BASH_VERSION

and that the dirstack variable, which was available in csh, is no longer available.

 echo $dirstack

//BREAK - BACK TO TALKING

=== What You Learned

In this section you learned that a shell is a program that allows you to do
useful work on a computer, how to start a non-bash shell from the bash shell,
and that shells are related by their history.

=== Exercises

If you want to go further, some exercises you might want to run are to try
running the other shells, reading their man pages (eg by running man csh),
research their history online. It can also be useful to learn about some of the
differences between sh and bash.


=== What's Next?

Next you're going to start getting your hands dirty in earnest and cover quoting
and globbing in bash.

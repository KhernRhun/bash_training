:backend: revealjs
:revealjs_theme: night
//:revealjs_theme: league //:revealjs_theme: moon //:revealjs_theme: blood //:revealjs_theme: simple //:revealjs_theme: solarized //:revealjs_theme: beige //:revealjs_theme: black //:revealjs_theme: white //:revealjs_theme: serif //:revealjs_theme: sky

:revealjs_overview: true
:revealjs_control: true
:revealjs_previewLinks: true
:revealjs_transition: concave
:revealjs_center: false
:revealjs_autoSlide: 0
:revealjs_progress: true

:icons: font

//http://asciidoctor.org/docs/install-and-use-revealjs-backend/

== Introduction to Bash

Ian Miell

@ianmiell

image::images/me.jpg[height=200]

== Introduction

=== About Me

[%step]
- Twitter: @ianmiell

- email: ian.miell@gmail.com


=== Me and Bash

[%step]
- Career

- No-one ever taught me bash

- Stumbled for years

- Decided to write a book

=== This Course

- Polls

- Exercises

- Group chat

- If you have 'advanced' questions, mail/tweet me

- Occasional yes/no questions (practice)


=== Pre-requisites

[%step]
- Familiar with commmand line

- Bash version (ideally 4+)

- Any editor you like (vim for me)

- Windows

=== Target Audiences

[%step]
Target audiences and what you'll get out of it:

- hardly used bash    => will get a coverage of 90% of bash features used

- used bash somewhat  => refresher, and maybe explain a few things seen before

- used bash for years => 'aha moments' - I'd always wondered about that!


=== Poll - Experience?

[%step]
- never used bash

- used bash for < 2 years

- used bash for < 5 years

- used bash for < 10 years

- used bash for > 10 years

=== Structure of Course

[%step]
- Part I - Bash Fundamentals

- Part II - Basics Fundamentals (II)

- Part III - Scripting

- Part IV - Advanced


== Part I - Fundamentals

[%step]
- Variables

- Globbing

- Pipes

- Redirects

== What is Bash?

[%step]
- What's a shell?

- Other shells

- A programming language

=== What is a Shell?

[%step]
- Takes commands

- Interprets them into OS calls and computations

- Needs a language to do this

=== 1.1 Brief History of Bash

[%step]
- Family tree of shells

image::images/lbthw.png[width=200]

- Terminal (tcsh)

== 1.2 Variables

=== We Will Cover

[%step]
- Basic variables

- Quoting variables

- `env` and `export` commands

- Simple arrays

=== Activity

- Terminal

=== Variables - Recap

[%step]
- Bash evaluation and space separation

- Quoting and variables: " vs '

- Shell variables

- Exported vs local variables

- Readonly variables

- Arrays, braces and variable names

== 1.3 Globbing and Quoting

=== We Will Cover

[%step]
- What a glob is

- Globs and quoting

- Dotfiles

- Globs vs regular expressions

=== Activity

- Terminal

=== Globbing and Quoting - Recap

[%step]
- What '*' means

- Dotfiles and foldrs

- Globs and regexes

- Single/double quotes and globs

== 1.4 Pipes and Redirects

=== We Will Cover

[%step]
- File descriptors

- 'Special' files

- 'Standard out' vs 'Standard error'

=== Activity

- Terminal

=== Globbing and Quoting - Recap

[%step]
- Standard output == file descriptor 1

- Standard error == file descriptor 2

- Pipes work on standard output

- redirects '>' vs '>>'

- '2>' and '2>&1'



== Part II - Fundamentals II

=== Part II - We Will Cover

[%step]
- Functions

- Tests

- Loops

- Exit Codes

- Process Substitution

- Command Substitution


== 2.1 Functions

=== We Will Cover

[%step]
- Bash functions

- The four different types of command in bash

=== Activity

[%step]
- Terminal

=== Functions - Recap

[%step]
- Functions vs Aliases vs Programs vs Builtins

- local variables

- 'which', 'type', 'declare'


== 2.2 Functions

=== We Will Cover

[%step]
- What bash tests are

- Different ways of writing bash tests

- Logical operators

- Binary and unary operators

- `if` statements

=== Activity

- Terminal

=== Tests - Recap

[%step]

- '[' is a builtin

- '[' vs '[['

- '&&' and '||'

- Bash and type safety.

- 'if' statements

== 2.3 Loops

=== We Will Cover

[%step]
- 'C'-style 'for' loops

- 'for' loops over items 'in' a list

- 'while' and 'until' loops

- 'case' statements

=== Activity

- Terminal

=== Loops - Recap

[%step]

- 'for', 'while', 'until'

- 'case' and 'getopts'

== 2.4 Exit Codes

=== We Will Cover

[%step]
- What an exit code is

- How to set one in scripts or functions

- Exit code conventions

- Some other 'special' parameters in bash

=== Activity

- Terminal

=== Standard exit codes (I)

- 0 == OK

- 1 == General error code

- 2 == Misuse of shell builtin

- 126 == Cannot execute

=== Standard exit codes (II)

- 127 == Command not found

- 128 == Invalid exit value

- (128 + n) == Process killed with signal 'n'


=== Exit Codes - Recap

[%step]
- The '$?' exit code shell variable

- standard exit codes

- grep - a special case

- Setting exit code

== 2.5 Process Substitution

=== We Will Cover

- The <() operator

=== Activity

- Terminal

=== Process Subsitution - Recap

-

== 2.6 Command Substitution

== Part III - Scripting

//1.6.scripts_and_startup.md
//2.1.command_substitution.md
//2.8.ifs.md
//3.3.here_docs.md
//4.2.debugging.md
//3.5.misc.md

[%step]


== Part IV - Advanced

//3.x.readline.md
//3.1.terminal_codes.md
//4.1.traps.md
//4.3.string_manipulation.md
//3.2.prompt.md
//3.4.history.md
//4.4.autocomplete.md
//4.5.cheapci.md

[%step]
